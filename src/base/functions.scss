//------------------------------------------------------------//

// * TeamSnap-UI Functions
// * 1. Basic Math Helper Functions
// * 2. Font Scaling Function
// * 3. Color Scaling Function
// * 4. Grid Scaling Function

// Notes:
// * Scale functions are used to create consistancy on our
// spacing, font sizing, and color varients

// TODO : look at updating scaleGrid() to use negative steps

//------------------------------------------------------------//

// * 1. Basic Math Helper Functions

@function quarter($number) {
  $number: round($number / 4);
  @return $number
}

@function halve($number) {
  $number: round($number / 2);
  @return $number
}

@function double($number) {
  $number: round($number * 2);
  @return $number
}

@function quadruple($number) {
  $number: round($number * 4);
  @return $number
}

@function convertNegative($number) {
  $number: $number * -1;
  @return $number
}

// * 2. Font Scaling Function

@function scaleFont($property, $step) {

  // common rules of our font scale
  $ratio: 1.125;

  // handles nagative steps for font scale
  @if ($step < 0) {
    $step: convertNegative($step);
    @for $i from 1 through $step {
      $property: $property / $ratio;
    }
  }

  // handles base & positive steps for font scale
  @else if ($step > 0) {
    @for $i from 1 through $step {
      $property: $property * $ratio;
    }
  }

  // round pixel values to nearest whole number
  @if (unit($property) == 'px') {
    $property: round($property);
  }

  @return $property;

}

// * 3. Color Scaling Function

@function scaleColor($color, $step) {

  // common rules of our color scale
  $tintMax:  10;
  $shadeMax: -4;
  $ratio:   10%;

  // setting the base $color variable as hue
  $color: $color;

  // adds an extra 5% tint after 90% (or six steps)
  @if ($step >= $tintMax) {
    $color: mix(white, $color, 95%);
  }

  // mixes the base color in increments of white by 15%
  @else if ($step >= 0 ) and ($step < $tintMax) {
    $color: mix(white, $color, ($step * $ratio));
  }

  // mixes the base color in increments of black by 15%
  @else if ($step < 0 ) and ($step >= $shadeMax) {
    $step: convertNegative($step);
    $color: mix(black, $color, ($step * $ratio));
  }

  // caps shading to a 2 step limit
  @else if ($step < $shadeMax) {
    $step: convertNegative($shadeMax);
    $color: mix(black, $color, ($ratio * $step));
  }

  @return $color

}

// * 4. Grid Scaling Function

@function scaleGrid($step) {

  // common rules of our spacing scale
  $base-unit: 8px;

  // setting the base $spacing variable as the base unit
  $spacing: $base-unit;
  
  @if $step >= 1 {
    @return $spacing * round($step);
  }
  
  // These are the only acceptable values when scaling the grid down
  $grid-values: (0, 1, 2, 4, 8);
  
  $has-been-set: false;
  @each $grid-value in $grid-values {
    @if not $has-been-set {
      $index: index($grid-values, $grid-value);
      
      $next-value: null;
      @if length($grid-values) >= $index + 1 {
        $next-value: nth($grid-values, $index + 1);
      } @else {
        $next-value: $grid-value;
      }
      
      $unitless-base: ($base-unit / (($base-unit * 0) + 1));
      $grid-value-scaled: ($grid-value / $unitless-base);
      $next-value-scaled: ($next-value / $unitless-base);
      $midpoint: (($next-value-scaled - $grid-value-scaled) / 2) + $grid-value-scaled;
      @if $step < $midpoint {
        $spacing: round($spacing * $grid-value-scaled);
        $has-been-set: true;
      }
    }
  }
  
  @return $spacing;
}
